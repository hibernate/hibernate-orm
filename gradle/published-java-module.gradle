/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */

apply from: rootProject.file( 'gradle/releasable.gradle' )
apply from: rootProject.file( 'gradle/java-module.gradle' )
apply from: rootProject.file( 'gradle/publishing-pom.gradle' )

apply plugin: 'signing'

// Make sure that the publishReleaseArtifacts task of the release module runs the release task of this sub module
tasks.getByPath( ':release:publishReleaseArtifacts' ).dependsOn tasks.release

configurations {
	javadocSources {
		description 'Used to aggregate javadocs for the whole project'
	}
}

dependencies {
	javadocSources sourceSets.main.allJava
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Publishing

java {
	// Configure the Java "software component" to include javadoc and sources jars in addition to the classes jar.
	// Ultimately, this component is what makes up the publication for this project.
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		// main publication
		publishedArtifacts {
			from components.java
		}

		// relocation for the published artifacts based on the old groupId
		relocationPom( MavenPublication ) {
			pom {
				name = project.name + ' - relocation'
				groupId = 'org.hibernate'
				artifactId = project.name
				version = project.version

				description = project.description
				url = 'https://hibernate.org/orm'

				organization {
					name = 'Hibernate.org'
					url = 'https://hibernate.org'
				}

				licenses {
					license {
						name = 'GNU Library General Public License v2.1 or later'
						url = 'https://www.opensource.org/licenses/LGPL-2.1'
						comments = 'See discussion at https://hibernate.org/community/license/ for more details.'
						distribution = 'repo'
					}
				}

				scm {
					url = 'https://github.com/hibernate/hibernate-orm'
					connection = 'scm:git:https://github.com/hibernate/hibernate-orm.git'
					developerConnection = 'scm:git:git@github.com:hibernate/hibernate-orm.git'
				}

				developers {
					developer {
						id = 'hibernate-team'
						name = 'The Hibernate Development Team'
						organization = 'Hibernate.org'
						organizationUrl = 'https://hibernate.org'
					}
				}

				issueManagement {
					system = 'jira'
					url = 'https://hibernate.atlassian.net/browse/HHH'
				}

				distributionManagement {
					relocation {
						groupId = 'org.hibernate.orm'
						artifactId = project.name
						version = project.version
					}
				}
			}
		}
	}
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Signing

def signPublicationsTask = tasks.register('signPublications') {
	description "Grouping task which executes all Sign tasks"

	dependsOn tasks.withType( Sign )
}

tasks.named( "publishPublishedArtifactsPublicationToSonatypeRepository" ) {
	// publishing depends on signing
	dependsOn signPublicationsTask
}

tasks.register('sign') {
	description "Pseudonym for :signPublications"
	dependsOn signPublicationsTask
}

var signingExtension = project.getExtensions().getByType(SigningExtension) as SigningExtension
signingExtension.sign publishing.publications.publishedArtifacts

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
	boolean wasSigningRequested = false
	boolean wasPublishingRequested = false

	graph.allTasks.each {task ->
		if ( task instanceof Sign ) {
			wasSigningRequested = true
		}
		else if ( task instanceof PublishToMavenRepository ) {
			wasPublishingRequested = true
		}
	}

	if ( wasPublishingRequested ) {
		def ossrhUser = System.getenv().get( "ORG_GRADLE_PROJECT_sonatypeUsername" )
		def ossrhPass = System.getenv().get( "ORG_GRADLE_PROJECT_sonatypePassword" )
		if ( ossrhUser == null || ossrhPass == null ) {
			throw new RuntimeException( "Cannot perform publishing to OSSRH without credentials." )
		}
		logger.lifecycle "Publishing {} : {} : {}", project.group, project.name, project.version
	}

	if ( wasSigningRequested || wasPublishingRequested ) {
		// signing was explicitly requested and/or we are publishing to Sonatype OSSRH
		// 		- we need the signing to happen
		signingExtension.required = true

		var signingKey = resolveSigningKey()
		var signingPassword = resolveSigningPassphrase()
		signingExtension.useInMemoryPgpKeys( signingKey, signingPassword )
	}
	else {
		// signing was not explicitly requested and we are not publishing to OSSRH,
		// 		- disable all Sign tasks
		tasks.withType( Sign ).each { t-> t.enabled = false }
	}
}

static String resolveSigningKey() {
	var key = System.getenv().get( "SIGNING_GPG_PRIVATE_KEY" )
	if ( key != null ) {
		return key
	}

	var keyFile = System.getenv().get( "SIGNING_GPG_PRIVATE_KEY_PATH" )
	if ( keyFile != null ) {
		return new File( keyFile ).text
	}

	throw new RuntimeException( "Cannot perform signing without GPG details." )
}

static String resolveSigningPassphrase() {
	var passphrase = System.getenv().get( "SIGNING_GPG_PASSPHRASE" )
	if ( passphrase == null ) {
		throw new RuntimeException( "Cannot perform signing without GPG details." )
	}
	return passphrase
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release / publishing tasks

task ciBuild {
	dependsOn test, tasks.publishToSonatype
}

tasks.release.dependsOn tasks.test, tasks.publishToSonatype

tasks.preVerifyRelease.dependsOn build
tasks.preVerifyRelease.dependsOn generateMetadataFileForPublishedArtifactsPublication
tasks.preVerifyRelease.dependsOn generatePomFileForPublishedArtifactsPublication
tasks.preVerifyRelease.dependsOn generatePomFileForRelocationPomPublication

tasks.publishToSonatype.mustRunAfter test


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Ancillary tasks

task showPublications {
	doFirst {
		project.publishing.publications.each { publication ->
			println "Publication (${publication.name}): ${publication.groupId}:${publication.artifactId}:${publication.version}"
			publication.artifacts.each { artifact ->
				println "    > ${artifact}"
			}
		}
	}
}