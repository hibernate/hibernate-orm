<?xml version="1.0"?>
<!--
  ~ SPDX-License-Identifier: Apache-2.0
  ~ Copyright Red Hat Inc. and Hibernate Authors
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.hibernate.orm.test.sql.check">

    <class name="ExceptionCheckingEntity" table="ENTITY_E">
        <id name="id" unsaved-value="0" column="ID">
            <generator class="increment"/>
        </id>
        <property name="name" not-null="true"/>
        <sql-insert callable="true" check="none">{call createEntityE(?,?)}</sql-insert>
        <sql-update callable="true" check="none">{call updateEntityE(?,?)}</sql-update>
        <sql-delete callable="true" check="none">{call deleteEntityE(?)}</sql-delete>
    </class>

    <class name="ParamCheckingEntity" table="ENTITY_P">
        <id name="id" unsaved-value="0" column="ID">
            <generator class="increment"/>
        </id>
        <property name="name" not-null="true"/>
        <sql-insert callable="true" check="param">{call createEntityP(?,?,?)}</sql-insert>
        <sql-update callable="true" check="param">{? = call updateEntityP(?,?)}</sql-update>
        <sql-delete callable="true" check="param">{? = call deleteEntityP(?)}</sql-delete>
    </class>


    <database-object>
        <create>
            CREATE OR REPLACE PROCEDURE createEntityE(p_name ENTITY_E.NAME%TYPE, p_id ENTITY_E.ID%TYPE)
            AS BEGIN
                RAISE_APPLICATION_ERROR( -20001, 'Insert failure checking' );
            END;
        </create>
        <drop>
            DROP PROCEDURE createEntityE;
        </drop>
    </database-object>

    <database-object>
        <create>
            CREATE OR REPLACE PROCEDURE updateEntityE(p_name ENTITY_E.NAME%TYPE, p_id ENTITY_E.ID%TYPE)
            AS BEGIN
                RAISE_APPLICATION_ERROR( -20001, 'Update failure checking' );
            END;
        </create>
        <drop>
            DROP PROCEDURE updateEntityE;
        </drop>
    </database-object>

    <database-object>
        <create>
            CREATE OR REPLACE PROCEDURE deleteEntityE(p_id ENTITY_E.ID%TYPE)
            AS BEGIN
                RAISE_APPLICATION_ERROR( -20001, 'Update failure checking' );
            END;
        </create>
        <drop>
            DROP PROCEDURE deleteEntityE;
        </drop>
    </database-object>


    <database-object>
        <!-- Demonstrate using an Oracle procedure and a registered OUT paramater as part of hand supplied sql -->
        <create>
            CREATE OR REPLACE PROCEDURE createEntityP(result OUT INTEGER, p_name ENTITY_E.NAME%TYPE, p_id ENTITY_E.ID%TYPE)
            AS BEGIN
                /* force a failure by returning a non-1 result */
                result := 2;
            END;
        </create>
        <drop>
            DROP PROCEDURE createEntityP;
        </drop>
    </database-object>

    <database-object>
        <!-- Demonstrate using an Oracle function and it's return value as part of hand supplied sql -->
        <create>
            CREATE OR REPLACE FUNCTION updateEntityP(p_name ENTITY_E.NAME%TYPE, p_id ENTITY_E.ID%TYPE)
            RETURN INTEGER IS BEGIN
                RETURN 2;
            END;
        </create>
        <drop>
            DROP PROCEDURE updateEntityP;
        </drop>
    </database-object>

    <database-object>
        <create>
            CREATE OR REPLACE FUNCTION deleteEntityP(p_id ENTITY_E.ID%TYPE)
            RETURN INTEGER IS BEGIN
                RETURN 2;
            END;
        </create>
        <drop>
            DROP PROCEDURE deleteEntityE;
        </drop>
    </database-object>

</hibernate-mapping>