<?xml version="1.0"?>
<!--
  ~ SPDX-License-Identifier: Apache-2.0
  ~ Copyright Red Hat Inc. and Hibernate Authors
  -->
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!--

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
-->

<hibernate-mapping package="org.hibernate.orm.test.sql.hand" default-access="field">
	   
	<class name="Organization" table="ORGANIZATION">
		<id name="id" unsaved-value="0" column="orgid">
			<generator class="increment"/>
		</id>
		<property name="name" column="name" not-null="true"/>
		<set lazy="true" name="employments" 
			inverse="true">
			<key column="employer"/> <!-- only needed for DDL generation -->
			<one-to-many class="Employment"/>
		</set>
	</class>
	
	<class name="Person" table="PERSON">
		<id name="id" unsaved-value="0" column="perid">
			<generator class="increment"/>
		</id>
		<property name="name" column="name" not-null="true"/>
	</class>

	<class name="Group" table="GROUPP">
		<id name="id" unsaved-value="0" column="id">
			<generator class="increment"/>
		</id>
		<property name="name" column="name" not-null="true"/>
		<list name="persons" table="GROUP_PERSON"
			cascade="none" inverse="false" lazy="true">
			<key column="group_id"	/>
			<list-index column="pos" />
			<many-to-many class="Person" column="person_id" />
		</list>
	</class>
	
	<class name="Employment" table="EMPLOYMENT">
		<id name="employmentId" unsaved-value="0" column="empid">
			<generator class="increment"/>
		</id>
		<many-to-one name="employee" column="employee" not-null="true" update="false"/>
		<many-to-one name="employer" column="employer" not-null="true" update="false"/>
		<property name="startDate" column="start_date" not-null="false"/>
		<property name="endDate" column="end_date" insert="false"/>
		<property name="regionCode" column="region_code" update="false"/>
		<component name="salary" class="org.hibernate.orm.test.sql.hand.MonetaryAmountUserType">
			<property name="value" column="amount">
				<type name="float"/>
			</property>
			<property name="currency" column="currency"/>
		</component>
	</class>
	
	<class name="Order" table="TBL_ORDER">
	  <composite-id name="orderId" class="Order$OrderId">
	  	<key-property name="orgid"/>
		<key-property name="ordernumber"/>
	  </composite-id>
	  
	  <many-to-one name="product">
	    <column name="prod_orgid"/>
	    <column name="prod_no"/>
	  </many-to-one>
	  <many-to-one name="person"/>
	</class>
	
	<class name="Product">
	  <composite-id name="productId" class="Product$ProductId">
	  	<key-property name="orgid"/>
		<key-property name="productnumber"/>
	  </composite-id>
	  
	  <property name="name"/>
	  
	  <set name="orders" inverse="true">
	  	<key>
	  		<column name="prod_orgid"/>
	  		<column name="prod_no"/>
	  	</key>
	  	<one-to-many class="Order"/>
	  </set>
	</class>

    <class name="Dimension">
        <id name="id" type="long">
            <generator class="increment"/>
        </id>
        <property name="length" column="d_len"/>
        <property name="width" column="d_width"/>
    </class>

    <class name="SpaceShip">
        <id name="id" type="integer">
            <generator class="increment"/>
        </id>
        <property name="name" column="fld_name"/>
        <property name="model" column="fld_model"/>
        <property name="speed" column="fld_speed"/>
        <component name="dimensions">
            <property name="length" column="fld_length"/>
            <property name="width" column="fld_width"/>
        </component>
    </class>

    <class name="Speech">
        <id name="id" type="integer">
            <generator class="increment"/>
        </id>
        <property name="name" column="name"/>
        <property name="length" column="flength"/>
    </class>

    <class name="TextHolder" table="TEXT_HOLDER">
        <id name="id" column="id">
            <generator class="increment"/>
        </id>
        <property name="description" column="description" type="text" length="15000"/>
    </class>

    <class name="ImageHolder" table="IMAGE_HOLDER">
        <id name="id" column="id">
            <generator class="increment"/>
        </id>
        <property name="photo" column="photo" type="image" length="15000"/>
    </class>    

    <resultset name="org-emp-regionCode">
        <return-scalar column="region_code" type="string"/>
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
    </resultset>

    <resultset name="org-emp-person">
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
        <return-join alias="pers" property="emp.employee"/>
    </resultset>


    <resultset name="org-description">
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
    </resultset>

    <resultset name="spaceship-vol">
        <return alias="sps" class="SpaceShip">
            <return-property name="id" column="id"/>
            <return-property name="name" column="name"/>
            <return-property name="model" column="model"/>
            <return-property name="speed" column="speed"/>
            <return-property name="dimensions.length" column="length"/>
            <return-property name="dimensions.width" column="width"/>
        </return>
        <return-scalar column="surface"/>
        <return-scalar column="volume"/>
    </resultset>

    <resultset name="speech">
        <return alias="sp" class="Speech">
            <return-property name="id" column="id"/>
            <return-property name="name" column="name"/>
            <return-property name="length" column="flength"/>
        </return>
        <return-scalar column="scalar_name"/>
    </resultset>

    <sql-query name="spaceship" resultset-ref="spaceship-vol">
		select id as id,
               fld_name as name,
               fld_model as model,
               fld_speed as speed,
               fld_length as length,
               fld_width as width,
               fld_length * fld_width as surface,
               fld_length * fld_width *10 as volume
        from SpaceShip
	</sql-query>

    <sql-query name="orgNamesOnly">
		<return-scalar column="name" type="string"/>
		SELECT org.name FROM ORGANIZATION org
	</sql-query>

	<sql-query name="orgNamesAndOrgs">
		<return-scalar column="thename" type="string"/>
		<return alias="org" class="Organization"/>
		SELECT org.name AS thename, org.name AS {org.name}, org.orgid AS {org.id}
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>

	<sql-query name="orgsAndOrgNames">
		<return alias="org" class="Organization"/>
		<return-scalar column="thename" type="string"/>
		SELECT org.name AS thename, org.name AS {org.name}, org.orgid AS {org.id}
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>	

	<sql-query name="orgIdsAndOrgNames">
		<return-scalar column="orgid" type="long"/>
		<return-scalar column="thename" type="string"/>
		SELECT name AS thename, orgid AS orgid
		FROM ORGANIZATION
		ORDER BY thename
	</sql-query>

	<sql-query name="AllEmploymentAsMapped">
		<return alias="emp" class="Employment"/>
		SELECT * FROM EMPLOYMENT
	</sql-query>

	<sql-query name="EmploymentAndPerson">
		<return alias="emp" class="Employment"/>
		<return alias="pers" class="Person"/>
		SELECT * FROM EMPLOYMENT, PERSON
	</sql-query>

	<sql-query name="organizationEmploymentsExplicitAliases">
		<load-collection alias="empcol" role="Organization.employments"/>
		SELECT empcol.employer as {empcol.key}, empcol.empid as {empcol.element}, {empcol.element.*}
		FROM EMPLOYMENT empcol
		WHERE employer = :id
		ORDER BY start_date ASC, employee ASC
	</sql-query>	

	<sql-query name="organizationreturnproperty">
		<return alias="org" class="Organization">
            <return-property name="id" column="orgid"/>
            <return-property name="name" column="name"/>
		</return>
		<return-join alias="emp" property="org.employments">
			<return-property name="key" column="employer"/>
			<return-property name="element" column="empid"/>
			<return-property name="element.employee" column="employee"/>
			<return-property name="element.employer" column="employer"/>
			<return-property name="element.startDate" column="xstart_date"/>
			<return-property name="element.endDate" column="end_date"/>
			<return-property name="element.regionCode" column="region_code"/>
			<return-property name="element.employmentId" column="empid"/>
			<return-property name="element.salary.value" column="amount1"/>
			<return-property name="element.salary.currency" column="currency"/>
		</return-join>
		SELECT org.orgid as orgid,
            org.name as name,
            emp.empid as empid,
            emp.employee as employee,
            emp.employer as employer,
            emp.start_date as xstart_date,
            emp.end_date as end_date,
            emp.region_code as region_code,
            emp.amount as amount1,
            emp.currency as currency
        FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.orgid = emp.employer
		ORDER BY org.name DESC
	</sql-query>

    
	<sql-query name="organizationautodetect" resultset-ref="org-description">
	<!--  equal to "organizationpropertyreturn" but since no {} nor return-property are used hibernate will fallback to use the columns directly from the mapping -->
        SELECT org.orgid as orgid,
            org.name as name,
            emp.empid as empid,
            emp.employee as employee,
            emp.employer as employer,
            emp.start_date as start_date,
            emp.end_date as end_date,
            emp.region_code as region_code,
            emp.amount as amount,
            emp.currency as currency
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.orgid = emp.employer
	</sql-query>

	<sql-query name="manyToManyFetch">
        <![CDATA[
        	SELECT 	groupp.id as group_id,
        			groupp.name as group_name,
        			group_person.person_id as group_person_person_id,
        			group_person.group_id as group_person_group_id,
        			group_person.pos as group_person_pos,
        			person.perid as person_id,
        			person.name as person_name
			FROM 	GROUPP groupp,
					GROUP_PERSON group_person,
					PERSON person
			WHERE 	groupp.id = group_person.group_id
					and person.perid = group_person.person_id
       ]]>
        <return alias="groupp" class="Group">
            <return-property name="id" column="group_id" />
            <return-property name="name" column="group_name" />
        </return>
        <return-join alias="group_person" property="groupp.persons">
            <return-property name="key" column="group_person_group_id" />
            <return-property name="index" column="group_person_pos" />
            <return-property name="element" column="person_id" />
            <return-property name="element.id" column="person_id" />
            <return-property name="element.name" column="person_name" />
        </return-join>
    </sql-query>

</hibernate-mapping>