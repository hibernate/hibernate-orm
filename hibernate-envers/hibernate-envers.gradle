/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Red Hat Inc. and Hibernate Authors
 */

plugins {
    id "local.publishing-java-module"
    id "local.publishing-group-relocation"
}

description = "Hibernate's entity version (audit/history) support"

dependencies {
    api project( ':hibernate-core' )

    implementation libs.hibernateModels
    implementation jakartaLibs.jaxbApi
    implementation jakartaLibs.jaxb
    implementation libs.jandex
    implementation libs.hibernateModels

    compileOnly libs.ant

    annotationProcessor project( ':hibernate-processor' )
    compileOnly jakartaLibs.annotation

    testImplementation project( ':hibernate-testing' )

    testAnnotationProcessor project( ':hibernate-processor' )
}

test {
    include '**/**'
}

sourceSets {
    test {
        ext {
            enversDemoJavaDir = file( "src/demo/java" )
            enversDemoResourcesDir = file( "src/demo/resources" )
        }
        java {
            srcDir enversDemoJavaDir
        }
        resources {
            srcDir enversDemoResourcesDir
        }
    }
}

configurations {
    tests {
        description = 'Configuration for the produced test jar'
    }
}

tasks.withType( Test.class ).each { test ->
    // see GradleParallelTestingResolver for how the test worker id is resolved in JDBC configs
    if ( project.db == "h2" || project.db == "hsqldb" || project.db == "pgsql_ci" ) {
        // Most systems have multi-threading and maxing out a core on both threads will hurt performance
        // Also, as soon as we hit 16+ threads, the returns are diminishing, so divide by 4
        def threadCount = Runtime.runtime.availableProcessors()
        test.maxParallelForks = threadCount >= 16 ? threadCount.intdiv( 4 ) : (threadCount.intdiv( 2 ) ?: 1)
        test.systemProperty 'maxParallelForks', test.maxParallelForks
    }
    else if ( project.db == "oracle_test_pilot_database" ) {
        // Since Oracle TestPilot databases run on separate machines, use all threads for testing
        test.maxParallelForks = Runtime.runtime.availableProcessors()
        test.systemProperty 'maxParallelForks', test.maxParallelForks
    }
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task testJar(type: Jar, dependsOn: testClasses) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set( 'test' )
    from sourceSets.test.output
}

artifacts {
    tests testJar
}
